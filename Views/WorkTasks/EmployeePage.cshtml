@model employeesTaskManager.Models.Employee

@using Microsoft.AspNetCore.Identity
@inject UserManager<ApplicationUser> UsrManager

@{
    ViewData["Title"] = Model.Name;
    List<WorkTask> ToDoTasks = Model.tasks.Where(x => x.Status == "ToDo").OrderBy(x => x.DeadLine).ToList();
    List<WorkTask> InProgressTasks = Model.tasks.Where(x => x.Status == "InProgress").OrderBy(x => x.DeadLine).ToList();
    List<WorkTask> DoneTasks = Model.tasks.Where(x => x.Status == "Done").OrderBy(x => x.DeadLine).ToList();
}

<style>
    .task-columns {
        display: flex;
        justify-content: space-between;
    }

    .task-column {
        flex: 1;
        margin: 10px;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        position: relative;
    }

    .todo-column {
        background-color: #3498db;
    }

    .inprogress-column {
        background-color: #2ecc71;
    }

    .done-column {
        background-color: #e74c3c;
    }

    .task {
        margin-bottom: 10px;
        padding: 10px;
        border-radius: 5px;
        background-color: #ffffff;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        position: relative;
    }

        .task h3 {
            margin: 0;
        }

        .task p {
            margin: 5px 0;
        }

    .task-menu {
        position: absolute;
        top: 10px;
        right: 10px;
        display: none;
        background-color: #fff;
        border-radius: 5px;
        z-index: 1;
    }

    /* Primary Button */
    .btn-edit {
        padding: 6px 12px; /* Adjust padding as needed */
        margin-bottom: 5px;
        border-radius: 6px; /* Rounded corners */
        background-color: #007bff; /* Modrá farba pre primárne tlačidlo */
        color: #fff; /* Text color */
        text-decoration: none;
        display: inline-block;
        transition: background-color 0.3s; /* Smooth transition for hover effect */
        font-size: 14px; /* Adjust font size */
    }

        .btn-edit:hover {
            background-color: #0056b3; /* Tmavšia modrá farba pri najazdení */
        }

    /* Danger Button */
    .btn-delete {
        padding: 6px 12px; /* Adjust padding as needed */
        border-radius: 6px; /* Rounded corners */
        background-color: #dc3545; /* Červená farba pre nebezpečné tlačidlo */
        color: #fff; /* Text color */
        text-decoration: none;
        display: inline-block;
        transition: background-color 0.3s; /* Smooth transition for hover effect */
        font-size: 14px; /* Adjust font size */
    }

        .btn-delete:hover {
            background-color: #c82333; /* Tmavšia červená farba pri najazdení */
        }

    .task-menu a {
        display: block;
        padding: 10px;
        text-decoration: none;
        color: #fff; /* Adjust text color as needed */
    }

        .task-menu a:hover {
            background-color: #333; /* Adjust hover background color as needed */
        }

    .task:hover .task-menu {
        display: block;
    }

    .employee-header {
        text-align: center;
        padding: 20px;
        background-color: #007bff; /* Modrá farba pre hlavičku */
        color: #fff;
        border-radius: 10px;
        margin-bottom: 20px;
    }

    /* Vylepšené štýly pre tlačidlo Create */
    .btn-create {
        padding: 12px 24px;
        border: none;
        border-radius: 8px;
        background-color: #28a745; /* Zelená farba pre tlačidlo Create */
        color: #fff;
        text-decoration: none;
        display: inline-block;
        transition: background-color 0.3s;
    }

        .btn-create:hover {
            background-color: #218838; /* Tmavšia zelená farba pri najazdení */
        }
</style>

<div class="employee-header">
    <h1>@Model.Name</h1>
    <p>Email: @Model.Email</p>
    @{
        var user = await UsrManager.FindByNameAsync(User.Identity.Name);
        bool hasManagerRole = await UsrManager.IsInRoleAsync(user, "Manager");
        if (hasManagerRole)
        {
            <a asp-action="Create" asp-route-id="@Model.EmployeeId" class="btn-create">Vytvoriť Úlohu</a>
        }
    }
</div>

<div class="task-columns">
    <div class="task-column todo-column" ondragover="allowDrop(event)" ondrop="drop(event)">
        <h2>Na vykonanie</h2>
        @foreach (var task in ToDoTasks)
        {
            <div class="task" draggable="true" ondragstart="drag(event)" id="@task.Id">
                <h3>@task.Name</h3>
                <p>@task.Description</p>
                @{
                    int remainingDays = (int)(task.DeadLine - DateTime.Now).TotalDays;
                    if (remainingDays < 10)
                    {
                        <p style="color: red;">Do: @task.DeadLine.ToString("dd/MM/yyyy"), Ostáva: @remainingDays dní</p>
                    }
                    else if (remainingDays > 30)
                    {
                        <p style="color: green;">Do: @task.DeadLine.ToString("dd/MM/yyyy"), Ostáva: @remainingDays dní</p>
                    }
                    else
                    {
                        <p style="color: orange;">Do: @task.DeadLine.ToString("dd/MM/yyyy"), Ostáva: @remainingDays dní</p>
                    }
                }
                <div class="task-menu">
                    <a asp-action="Edit" asp-route-id="@task.Id" class="btn-edit">Upraviť</a>
                    <a asp-action="Delete" asp-route-id="@task.Id" class="btn-delete">Vymazať</a>
                </div>
            </div>
        }
    </div>

    <div class="task-column inprogress-column" ondragover="allowDrop(event)" ondrop="drop(event)">
        <h2>V procese</h2>
        @foreach (var task in InProgressTasks)
        {
            <div class="task" draggable="true" ondragstart="drag(event)" id="@task.Id">
                <h3>@task.Name</h3>
                <p>@task.Description</p>
                @{
                    int remainingDays = (int)(task.DeadLine - DateTime.Now).TotalDays;
                    if (remainingDays < 10)
                    {
                        <p style="color: red;">Do: @task.DeadLine.ToString("dd/MM/yyyy"), Ostáva: @remainingDays dní</p>
                    }
                    else if (remainingDays > 30)
                    {
                        <p style="color: green;">Do: @task.DeadLine.ToString("dd/MM/yyyy"), Ostáva: @remainingDays dní</p>
                    }
                    else
                    {
                        <p style="color: orange;">Do: @task.DeadLine.ToString("dd/MM/yyyy"), Ostáva: @remainingDays dní</p>
                    }
                }
                <div class="task-menu">
                    <a asp-action="Edit" asp-route-id="@task.Id" class="btn-edit">Upraviť</a>
                    <a asp-action="Delete" asp-route-id="@task.Id" class="btn-delete">Vymazať</a>
                </div>
            </div>
        }
    </div>

    <div class="task-column done-column" ondragover="allowDrop(event)" ondrop="drop(event)">
        <h2>Hotovo</h2>
        @foreach (var task in DoneTasks)
        {
            <div class="task" draggable="true" ondragstart="drag(event)" id="@task.Id">
                <h3>@task.Name</h3>
                <p>@task.Description</p>
                @{
                    int remainingDays = (int)(task.DeadLine - DateTime.Now).TotalDays;
                    if (remainingDays < 10)
                    {
                        <p style="color: red;">Do: @task.DeadLine.ToString("dd/MM/yyyy"), Ostáva: @remainingDays dní</p>
                    }
                    else if (remainingDays > 30)
                    {
                        <p style="color: green;">Do: @task.DeadLine.ToString("dd/MM/yyyy"), Ostáva: @remainingDays dní</p>
                    }
                    else
                    {
                        <p style="color: orange;">Do: @task.DeadLine.ToString("dd/MM/yyyy"), Ostáva: @remainingDays dní</p>
                    }
                }
                @if (hasManagerRole)
                {
                    <div class="task-menu">
                        <a asp-action="Edit" asp-route-id="@task.Id" class="btn-edit">Upraviť</a>
                        <a asp-action="Delete" asp-route-id="@task.Id" class="btn-delete">Vymazať</a>
                    </div>
                }
            </div>
        }
    </div>
</div>

<script>
    function drag(ev) {
        ev.dataTransfer.setData("text", ev.target.id);
    }

    function allowDrop(ev) {
        ev.preventDefault();
    }

    function drop(ev) {
        ev.preventDefault();
        var data = ev.dataTransfer.getData("text");
        var draggedElement = document.getElementById(data);
        var dropZone = ev.target;

        // Find the parent task column
        while (dropZone && !dropZone.classList.contains("task-column")) {
            dropZone = dropZone.parentElement;
        }

        // Move the task to the new column
        if (dropZone) {
            var taskId = draggedElement.id;
            dropZone.appendChild(draggedElement);

            // Update the task status based on the column
            var newStatus = dropZone.classList.contains("todo-column")
                ? "ToDo"
                : dropZone.classList.contains("inprogress-column")
                    ? "InProgress"
                    : dropZone.classList.contains("done-column")
                        ? "Done"
                        : "";

            // Send an AJAX request to update the task status on the server
            updateTaskStatus(taskId, newStatus);
        }
    }

    function updateTaskStatus(taskId, newStatus) {
        // Perform an AJAX request to update the task status on the server
        // You can use fetch or another AJAX library here
        // Example:

        fetch(`../../WorkTasks/UpdateStatus?taskId=${taskId}&newStatus=${newStatus}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                taskId: taskId,
                newStatus: newStatus,
            }),
        })
            .then(response => response.json())
            .then(data => console.log(data))
            .catch(error => console.error('Error:', error));

    }
</script>
