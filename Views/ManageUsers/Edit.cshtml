@model employeesTaskManager.Models.complexUser

@{
    ViewData["Title"] = "Edit";
    
}
<h1>Edit</h1>

<h4>ManageUser</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Edit">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <!-- UserId -->
            <input type="hidden" asp-for="UserId" class="form-control" readonly />

            <!-- Role Dropdown -->
            <div class="form-group">
                <label asp-for="Role" class="control-label"></label>
                    <select asp-for="Role" class="form-control">
                        <option value="Admin">Admin</option>
                        <option value="Manager">Manager</option>
                        <option value="Employee">Employee</option>
                        <option value="None">None</option>
                    </select>
                <span asp-validation-for="Role" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label asp-for="CompanyId" class="control-label"></label>
                <select asp-for="CompanyId" class="form-control">
                    <option value="None">None</option>
                    @foreach (var company in Model.Firms)
                    {
                        <option value="@company.Id">@company.Name</option>
                    }
                </select>
                <span asp-validation-for="CompanyId" class="text-danger"></span>
            </div>

            <!-- FirstName -->
            <div class="form-group">
                <label asp-for="FirstName" class="control-label"></label>
                <input asp-for="FirstName" class="form-control" />
                <span asp-validation-for="FirstName" class="text-danger"></span>
            </div>

            <!-- LastName -->
            <div class="form-group">
                <label asp-for="LastName" class="control-label"></label>
                <input asp-for="LastName" class="form-control" />
                <span asp-validation-for="LastName" class="text-danger"></span>
            </div>

            <!-- Email -->
            <div class="form-group">
                <label asp-for="Email" class="control-label"></label>
                <input asp-for="Email" class="form-control" />
                <span asp-validation-for="Email" class="text-danger"></span>
            </div>
            <!-- Email Confirmation Status -->
            <div class="form-group">
                <div>
                    <input asp-for="IsEmailConfirmed" type="checkbox" id="isConfirmedCheckbox" />
                    <label asp-for="IsEmailConfirmed" class="control-label">Is Confirmed</label>
                </div>
            </div>

            <div class="form-group">
                <input type="submit" value="Save" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>
        // Optional: If you want to initialize the checkbox based on the initial value of IsEmailConfirmed
        document.getElementById('isConfirmedCheckbox').checked = @Model.IsEmailConfirmed.ToString().ToLower();

        // Optional: If you want to update the label based on the initial value of IsEmailConfirmed
        document.querySelector('label[for="isConfirmedCheckbox"]').innerText = @((Model.IsEmailConfirmed) ? "Is Confirmed" : "Is Not Confirmed");
    </script>
    <style>

        #isConfirmedCheckbox:checked + label {
            color: green; /* Change color when checked */
        }

        #isConfirmedCheckbox:not(:checked) + label {
            color: red; /* Change color when not checked */
        }
    </style>
}
